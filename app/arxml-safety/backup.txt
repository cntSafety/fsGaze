'use client';

import React, { useState, useEffect } from 'react';
import { Table, Form, Input, Select, Typography, Popconfirm, message } from 'antd';
import type { TableProps } from 'antd';
import { useRouter } from 'next/navigation';
import { getApplicationSwComponents } from '../services/neo4j/queries/components';
import { getFailuresForSwComponents, createFailureNode } from '../services/neo4j/queries/safety';

const { Option } = Select;

interface TableRow {
  key: string;
  swComponentUuid: string;
  swComponentName: string;
  failureName: string;
  failureDescription: string;
  asil: string;
  isNewRow?: boolean;
  failureUuid?: string;
}

interface EditableCellProps extends React.HTMLAttributes<HTMLElement> {
  editing: boolean;
  dataIndex: string;
  title: any;
  inputType: 'text' | 'select';
  record: TableRow;
  index: number;
}

const EditableCell: React.FC<React.PropsWithChildren<EditableCellProps>> = ({
  editing,
  dataIndex,
  title,
  inputType,
  record,
  index,
  children,
  ...restProps
}) => {
  const inputNode = inputType === 'select' ? (
    <Select style={{ width: '100%' }}>
      <Option value="A">ASIL A</Option>
      <Option value="B">ASIL B</Option>
      <Option value="C">ASIL C</Option>
      <Option value="D">ASIL D</Option>
      <Option value="QM">QM</Option>
    </Select>
  ) : (
    <Input />
  );

  return (
    <td {...restProps}>
      {editing ? (
        <Form.Item
          name={dataIndex}
          style={{ margin: 0 }}
          rules={[
            {
              required: dataIndex !== 'swComponentName',
              message: `Please Input ${title}!`,
            },
          ]}
        >
          {inputNode}
        </Form.Item>
      ) : (
        children
      )}
    </td>
  );
};

export default function ArxmlSafetyAnalysisTable() {
  const router = useRouter();
  const [form] = Form.useForm();
  const [tableData, setTableData] = useState<TableRow[]>([]);
  const [loading, setLoading] = useState(true);
  const [editingKey, setEditingKey] = useState('');
  const [isAddingFailure, setIsAddingFailure] = useState(false);
  const [currentPage, setCurrentPage] = useState(1);
  const [pageSize, setPageSize] = useState(10);

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    try {
      setLoading(true);
      
      // Get SW components
      const swComponentsResult = await getApplicationSwComponents();
      if (swComponentsResult.success && swComponentsResult.data) {
        const tableRows: TableRow[] = [];
        
        // Get failures for each SW component and create table rows
        for (const component of swComponentsResult.data) {
          const failuresResult = await getFailuresForSwComponents(component.uuid);
          
          if (failuresResult.success && failuresResult.data && failuresResult.data.length > 0) {
            // Create rows for existing failures
            failuresResult.data.forEach((failure) => {
              tableRows.push({
                key: `${component.uuid}-${failure.failureUuid}`,
                swComponentUuid: component.uuid,
                swComponentName: component.name,
                failureName: failure.failureName || '',
                failureDescription: failure.failureDescription || '',
                asil: failure.asil || 'A',
                failureUuid: failure.failureUuid
              });
            });
          } else {
            // Create a placeholder row for components with no failures
            tableRows.push({
              key: `${component.uuid}-empty`,
              swComponentUuid: component.uuid,
              swComponentName: component.name,
              failureName: 'No failures defined',
              failureDescription: '-',
              asil: '-'
            });
          }
        }
        
        // Sort table rows by component name to ensure proper grouping
        tableRows.sort((a, b) => {
          if (a.swComponentName !== b.swComponentName) {
            return a.swComponentName.localeCompare(b.swComponentName);
          }
          // Within the same component, put 'No failures defined' last
          if (a.failureName === 'No failures defined') return 1;
          if (b.failureName === 'No failures defined') return -1;
          return a.failureName.localeCompare(b.failureName);
        });
        
        setTableData(tableRows);
      }
    } catch (error) {
      console.error('Error loading data:', error);
      message.error('Failed to load safety analysis data');
    } finally {
      setLoading(false);
    }
  };

  const isEditing = (record: TableRow) => record.key === editingKey;

  const edit = (record: TableRow) => {
    form.setFieldsValue({
      ...record,
      failureName: record.failureName === 'No failures defined' ? '' : record.failureName,
      failureDescription: record.failureDescription === '-' ? '' : record.failureDescription,
      asil: record.asil === '-' ? 'A' : record.asil,
    });
    setEditingKey(record.key);
  };

  const addNewFailure = (swComponentUuid: string, swComponentName: string) => {
    const newKey = `${swComponentUuid}-new-${Date.now()}`;
    form.setFieldsValue({
      swComponentName,
      failureName: '',
      failureDescription: '',
      asil: 'A'
    });
    setEditingKey(newKey);
    
    // Add a temporary row for editing
    const newRow: TableRow = {
      key: newKey,
      swComponentUuid,
      swComponentName,
      failureName: '',
      failureDescription: '',
      asil: 'A',
      isNewRow: true
    };
    
    // Insert the new row right after the last row of the same component
    setTableData(prev => {
      const newData = [...prev];
      // Find the last index of rows with the same swComponentUuid
      let insertIndex = newData.length;
      for (let i = newData.length - 1; i >= 0; i--) {
        if (newData[i].swComponentUuid === swComponentUuid) {
          insertIndex = i + 1;
          break;
        }
      }
      // Insert the new row at the correct position
      newData.splice(insertIndex, 0, newRow);
      console.log('Adding new failure for component:', swComponentName, 'at index:', insertIndex);
      return newData;
    });
  };

  const cancel = () => {
    // Remove temporary new rows
    setTableData(prev => prev.filter(row => !row.isNewRow || row.key !== editingKey));
    setEditingKey('');
  };

  const save = async (key: React.Key) => {
    try {
      const row = (await form.validateFields()) as TableRow;
      const record = tableData.find(item => key === item.key);
      
      if (!record) return;

      setIsAddingFailure(true);
      
      if (record.isNewRow || record.failureName === 'No failures defined') {
        // Create new failure
        const result = await createFailureNode(
          record.swComponentUuid,
          row.failureName,
          row.failureDescription,
          row.asil
        );

        if (result.success) {
          await loadData(); // Reload all data
          setEditingKey('');
          message.success('Failure mode added successfully!');
        } else {
          message.error(`Error: ${result.message}`);
        }
      } else {
        // Update existing failure (for future implementation)
        const newData = [...tableData];
        const index = newData.findIndex(item => key === item.key);
        if (index > -1) {
          const item = newData[index];
          newData.splice(index, 1, {
            ...item,
            ...row,
          });
          setTableData(newData);
          setEditingKey('');
          message.success('Failure mode updated successfully!');
        }
      }
    } catch (errInfo) {
      console.log('Validate Failed:', errInfo);
      message.error('Please fill in all required fields');
    } finally {
      setIsAddingFailure(false);
    }
  };

  const columns = [
    {
      title: 'SW Component Name',
      dataIndex: 'swComponentName',
      key: 'swComponentName',
      editable: false,
      render: (text: string, record: TableRow, index: number) => {
        // Only show component name on the first row for each component in table order
        const isFirstRowForComponent = index === 0 || 
          tableData[index - 1]?.swComponentUuid !== record.swComponentUuid;
        
        return isFirstRowForComponent ? (
          <Typography.Link 
            style={{ fontWeight: 'bold' }}
            onClick={() => {
              router.push(`/arxml-safety/${record.swComponentUuid}`);
            }}
          >
            {text}
          </Typography.Link>
        ) : null;
      },
    },
    {
      title: 'Failure Mode Name',
      dataIndex: 'failureName',
      key: 'failureName',
      editable: true,
      render: (text: string) => (
        <span style={{ color: text === 'No failures defined' ? '#999' : 'inherit' }}>
          {text}
        </span>
      ),
    },
    {
      title: 'Failure Description',
      dataIndex: 'failureDescription',
      key: 'failureDescription',
      editable: true,
      render: (text: string) => (
        <span style={{ color: text === '-' ? '#999' : 'inherit' }}>
          {text}
        </span>
      ),
    },
    {
      title: 'ASIL',
      dataIndex: 'asil',
      key: 'asil',
      editable: true,
      render: (asil: string) => {
        if (asil === '-') return <span style={{ color: '#999' }}>-</span>;
        
        const getAsilColor = (level: string) => {
          switch (level) {
            case 'D': return { backgroundColor: '#fff2f0', color: '#cf1322', border: '1px solid #ffccc7' };
            case 'C': return { backgroundColor: '#fff7e6', color: '#d46b08', border: '1px solid #ffd591' };
            case 'B': return { backgroundColor: '#feffe6', color: '#7cb305', border: '1px solid #eaff8f' };
            case 'A': return { backgroundColor: '#f6ffed', color: '#52c41a', border: '1px solid #b7eb8f' };
            default: return { backgroundColor: '#fafafa', color: '#666', border: '1px solid #d9d9d9' };
          }
        };
        
        return (
          <span style={{
            padding: '2px 8px',
            borderRadius: '4px',
            fontSize: '12px',
            fontWeight: 'bold',
            ...getAsilColor(asil)
          }}>
            {asil}
          </span>
        );
      },
    },
    {
      title: 'Actions',
      dataIndex: 'actions',
      key: 'actions',
      render: (_: any, record: TableRow, index: number) => {
        const editable = isEditing(record);
        // Check if this is the first row for this component in table order
        const isFirstRowForComponent = index === 0 || 
          tableData[index - 1]?.swComponentUuid !== record.swComponentUuid;
        
        return editable ? (
          <span>
            <Typography.Link 
              onClick={() => save(record.key)} 
              style={{ marginInlineEnd: 8 }}
              disabled={isAddingFailure}
            >
              {isAddingFailure ? 'Saving...' : 'Save'}
            </Typography.Link>
            <Popconfirm title="Sure to cancel?" onConfirm={cancel}>
              <Typography.Link disabled={isAddingFailure}>Cancel</Typography.Link>
            </Popconfirm>
          </span>
        ) : (
          <span>
            {record.failureName !== 'No failures defined' && (
              <Typography.Link 
                disabled={editingKey !== ''} 
                onClick={() => edit(record)}
                style={{ marginInlineEnd: 8 }}
              >
                Edit
              </Typography.Link>
            )}
            {isFirstRowForComponent && (
              <Typography.Link 
                disabled={editingKey !== ''} 
                onClick={() => {
                  console.log('Add Failure button clicked!', { swComponentUuid: record.swComponentUuid, swComponentName: record.swComponentName });
                  addNewFailure(record.swComponentUuid, record.swComponentName);
                }}
              >
                + Add Failure
              </Typography.Link>
            )}
          </span>
        );
      },
    },
  ];

  const mergedColumns: TableProps<TableRow>['columns'] = columns.map((col) => {
    if (!col.editable) {
      return col;
    }
    return {
      ...col,
      onCell: (record: TableRow) => ({
        record,
        inputType: col.dataIndex === 'asil' ? 'select' : 'text',
        dataIndex: col.dataIndex,
        title: col.title,
        editing: isEditing(record),
      }),
    };
  });

  return (
    <Form form={form} component={false}>
      <Table<TableRow>
        components={{
          body: {
            cell: EditableCell,
          },
        }}
        bordered
        dataSource={tableData}
        columns={mergedColumns}
        rowClassName="editable-row"
        pagination={{
          current: currentPage,
          pageSize: pageSize,
          showSizeChanger: true,
          showQuickJumper: true,
          showTotal: (total, range) => `${range[0]}-${range[1]} of ${total} items`,
          pageSizeOptions: ['10', '20', '50', '100'],
          onChange: (page, size) => {
            // Only cancel editing if we're changing pages while editing
            if (editingKey !== '') {
              cancel();
            }
            setCurrentPage(page);
            if (size !== pageSize) {
              setPageSize(size);
            }
          },
          onShowSizeChange: (current, size) => {
            // Only cancel editing if we're changing page size while editing
            if (editingKey !== '') {
              cancel();
            }
            setCurrentPage(1); // Reset to first page when changing page size
            setPageSize(size);
          }
        }}
        loading={loading}
        size="small"
        scroll={{ x: 800 }}
      />
    </Form>
  );
}
